#!/bin/bash

# Check if the correct number of arguments are provided
if [ $# -lt 1 ]; then
  echo "Usage: $(basename $0) FILES"
  exit 1
fi

# The extract function handles the extraction process for different archive formats
extract() {
  arg="$1"
  pswd="$2"

  # Change directory to the archive file's parent directory
  cd "$(dirname "$arg")" || exit

  # Determine the archive format and extract it
  case "$arg" in
    # Tar-based archives
    *.tar.bz2)
      tar xjf "$arg" --one-top-level
      local code=$?
      ;;
    *.tar.gz)
      tar xzf "$arg" --one-top-level
      local code=$?
      ;;
    *.bz2)
      bunzip2 "$arg"
      local code=$?
      ;;
    *.gz)
      gunzip "$arg"
      local code=$?
      ;;
    *.tar)
      tar xf "$arg" --one-top-level
      local code=$?
      ;;
    # Other archive formats
    *.tbz2)
      (tar xjf "$arg" --one-top-level)
      local code=$?
      ;;
    *.tgz)
      tar xzf "$arg" --one-top-level
      local code=$?
      ;;
    *.tar.xz)
      a_dir=$(expr "$arg" : '\(.*\).tar.xz')
      7z x "$arg" -o"$a_dir" -p"$pswd"
      local code=$?
      ;;
    *.zip)
      a_dir=$(expr "$arg" : '\(.*\).zip')
      7z x "$arg" -o"$a_dir" -p"$pswd"
      local code=$?
      ;;
    *.7z)
      a_dir=$(expr "$arg" : '\(.*\).7z')
      7z x "$arg" -o"$a_dir" -p"$pswd"
      local code=$?
      ;;
    # Continue this pattern for the remaining archive formats
    # ...
  esac

  # Change back to the original directory and return the exit code
  cd - || exit $?
  exit $code
}

# Call the extract function with the provided arguments
extract "$1" "$2"
